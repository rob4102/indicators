require('dotenv').config();
const Taapi = require("taapi");

// Initialize TAAPI client
const taapi = new Taapi.default(process.env.TAAPI_SECRET);

// Fetch indicators in parallel
async function getIndicators(pair, interval) {
    try {
        // Define all indicators to fetch
        const indicators = [
            { name: "rsi", options: { period: 7 } }, // Short-period RSI
            { name: "ema", options: { period: 5 } }, // Fast EMA
            { name: "ema", options: { period: 20 } }, // Slow EMA
            { name: "stochrsi" },                    // Stochastic RSI
            { name: "vwap" },                        // VWAP
        ];

        // Create API call promises for each indicator
        const promises = indicators.map((indicator) =>
            taapi.getIndicator(indicator.name, pair, interval, indicator.options || {})
        );

        // Execute all API calls in parallel
        const results = await Promise.all(promises);
console.log(results);
        // Map results to indicator names
        return {
            rsi: results[0]?.value,
            ema5: results[1]?.value,
            ema20: results[2]?.value,
            stochrsi: results[3],
            vwap: results[4]?.value,
        };
    } catch (error) {
        console.error("Error fetching indicators:", error.message);
        return null;
    }
}

// Generate trade signals
async function getTradeSignal(pair, interval) {
    try {
        const indicators = await getIndicators(pair, interval);

        if (indicators) {
            const { rsi, ema5, ema20, stochrsi, vwap } = indicators;

            // Short signal: RSI overbought, EMA5 below EMA20, and below VWAP
            if (rsi > 80 && ema5 < ema20 && ema5 < vwap) {
                return {
                    signal: "Short",
                    reason: "RSI overbought, EMA5 below EMA20, and price below VWAP",
                };
            }

            // Buy signal: RSI oversold, EMA5 above EMA20, and above VWAP
            if (rsi < 20 && ema5 > ema20 && ema5 > vwap) {
                return {
                    signal: "Buy",
                    reason: "RSI oversold, EMA5 above EMA20, and price above VWAP",
                };
            }

            // Hold signal: No strong conditions met
            return {
                signal: "Hold",
                reason: "No strong signal detected",
            };
        }

        return { signal: "Error", reason: "Failed to fetch indicators" };
    } catch (error) {
        console.error("Error generating trade signal:", error.message);
        return { signal: "Error", reason: error.message };
    }
}

module.exports = {
    getIndicators,
    getTradeSignal,
};
